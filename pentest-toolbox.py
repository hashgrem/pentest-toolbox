"""
Project name: Pentest ToolBox
Version: 1.0
Copyright© 10/03/2023, DEMARD Jérémy et HERVIER Xavier 

"""

from modules.cvelookup import CVELookUp
from modules.searchsploit import searchsploit
from modules.dnslookup import DNSLookUp
from modules.certificate import getCertificate
from modules.portscan import Nmap
from modules.usernamecheck import checkusername
from modules.phonereverse import lookuphone
from modules.dorks import dorks
from modules.whoisrecon import whois_query
from modules.revshellgenerator import reverse_shells
from modules.fakeidentity import generate_fake_identity
from modules.webscan import check_server, check_robots_txt, url_discover, find_github
from modules.fpdf import renderHTML
from menu import displayHeader, displayMenu, ReconMenu, ScanningMenu, ExploitMenu, OsintMenu
from colorama import Fore, Back, Style, init
from datetime import datetime
import os

if __name__ == "__main__":

    init()
    displayHeader()
    displayMenu()
    
    option = int(input(">>> Choose an option\n>>> "))

    while option != 99:

        if option == 1:
            ReconMenu()
            subOption = str(input(">>> Choose an option\n>>> "))
            while subOption != 'z':

                if subOption == 'a':
                    domain = str(input(">>> Type a domain name\n>>> "))
                    print(whois_query(domain))

                if subOption == 'b':
                    CVE_ID = str(input(">>> Enter a CVE id (ex: CVE-2021-40438)\n>>> "))
                    print(CVELookUp(CVE_ID))
                    
                if subOption == 'c':
                    DNS_DOMAIN = str(input(">>> Enter a domain name\n>>> "))
                    dns_lookup = DNSLookUp(DNS_DOMAIN)
                    print(dns_lookup)
                    
                if subOption == 'd':
                    CERTIF = str(input(">>> Enter a domain name\n>>> "))
                    certif = getCertificate(CERTIF)
                    print(certif)
                    
                ReconMenu()
                subOption = str(input(">>> Choose an option\n>>> "))

        
        elif option == 2:
            ScanningMenu()
            subOption = str(input(">>> Choose an option\n>>> "))
            while subOption != 'z':

                if subOption == 'a':
                    TARGET = str(input(">>> Type target domain or IP\n>>> "))
                    scan, version = Nmap(TARGET)
                    print(scan)

                if subOption == 'b':
                    URL = str(input(">>> Type target URL (http://example.com/)\n>>> "))
                    check_server(URL, False)
                    check_robots_txt(URL)
                    find_github(URL)
                    
                if subOption == 'c':
                    URL = str(input(">>> Type target URL (http://example.com/)\n>>> "))
                    print(f">>> {Fore.GREEN}[+] Starting a dirbuster scan {Style.RESET_ALL}")
                    url_discover(URL)

                ScanningMenu()
                subOption = str(input(">>> Choose an option\n>>> "))

        elif option == 3:
            ExploitMenu()
            subOption = str(input(">>> Choose an option\n>>> "))
            while subOption != 'z':

                if subOption == 'a':
                    service = str(input(">>> Search for exploits on a service (ex: wordpress 4.0)\n>>> "))
                    exploit = searchsploit(service)
                    print(exploit)
                
                ExploitMenu()
                subOption = str(input(">>> Choose an option\n>>> "))

        elif option == 4:
            OsintMenu()
            subOption = str(input(">>> Choose an option\n>>> "))
            while subOption != 'z':

                if subOption == 'a':
                    user = str(input(">>> Enter a username\n>>> "))
                    usernamecheck = checkusername(user)
                    print(usernamecheck)

                if subOption == 'b':
                    numberphone = str(input(">>> Enter a phone number in international format (ex: 33969370364)\n>>> "))
                    phone = lookuphone(numberphone)
                    print(phone)

                if subOption == 'c':
                    local = 'fr_FR'
                    fake_identity = generate_fake_identity(local)
                    print(fake_identity)

                if subOption == 'd':
                    querys = str(input('>>> Enter a dorks requests (ex: "mommy" filetype:pdf)\n>>> '))
                    dorkquery = dorks(querys)
                    print(dorkquery)

                OsintMenu()
                subOption = str(input(">>> Choose an option\n>>> "))
        
        elif option == 5:
            domain = str(input(">>> Enter target domain name\n>>> "))
            URL = "http://"+domain
            
            HTML = ""
            HTML += f"<h2 align='center'>_________________________________</h2><br>"
            HTML += f"<h1 align='center'>VULNERABILITY REPORT</h1>"
            HTML += f"<h2 align='center'>_________________________________</h2><br>"
            HTML += f"<p align='center'><i>This is a highly concise vulnerability report generated by Python-based modules, offering a comprehensive analysis of the target's security.</i></p>"

            HTML += f"<h1 align='center'>Summary</h1>"
            HTML += f"""
            <h3 align='left'>
                <i>I. Overview............................................................................................................ 1</i>
                <i>II. DNS Request.......................................................................................................1</i>
                <i>III. Data about HTTP/HTTPS certificate.................................................................1</i>
                <i>IV. NMAP scan.......................................................................................................2</i>
                <i>V. Nikto scan............................................................................................................3</i>
                <i>VI. Potential vulnerabilities.....................................................................................3</i>
                <i>VII. Recommendations............................................................................................4</i>
            </h3>
            
            """
            HTML += f"<h1>I. Overview</h1><br>"
            HTML += f"<p>This report presents the results of a vulnerability assessment conducted on <strong>{domain}</strong> using Python modules. The objective of this assessment is to provide a brief overview of the security posture of the target and identify potential vulnerabilities that could be exploited by attackers.<br><br>The main objective of the assessment was to identify vulnerabilities that could be used by attackers to compromise the confidentiality, integrity, or availability of the target.<br><br>Python modules are used to automate the scanning process and identify potential vulnerabilities in the target</p><br><br><br>"
            HTML += f"<strong>Date:</strong>    {datetime.now().strftime('%Y-%m-%d %H:%M')}<br>"
            HTML += f"<strong>Target :</strong> {domain}<br>"
            HTML += f"<strong>Type:</strong>    vulnerability scaner<br>"
           
            print(f"\n>>> {Fore.GREEN}[+] Generating PDF...{Style.RESET_ALL}")
            print(f">>> {Fore.GREEN}[+] Started at {datetime.now()}{Style.RESET_ALL}")

            # DNS
            print(f">>> {Fore.YELLOW}[-] DNS Lookup...{Style.RESET_ALL}")
            HTML += f"<h1>II. DNS Request</h1><br>"
            HTML += f"<p>{DNSLookUp(domain, True)}</p>"
            print(f">>> {Fore.GREEN}[+] DNS done !{Style.RESET_ALL}")

            # Certificat
            print(f">>> {Fore.YELLOW}[-] Certificate lookup...{Style.RESET_ALL}")
            HTML += f"<h1>III. Data about HTTP/HTTPS certificate</h1><br>"
            HTML += f"<p>{getCertificate(domain, True)}</p>"
            print(f">>> {Fore.GREEN}[+] Certificate done !{Style.RESET_ALL}")
            
            # Scan NMAP
            print(f">>> {Fore.YELLOW}[-] Nmap scan...{Style.RESET_ALL}")
            resScan, versions = Nmap(domain, True)
            HTML += f"<h1>IV. NMAP scan</h1><br>"
            HTML += f"<p>{resScan}</p>"
            print(f">>> {Fore.GREEN}[+] Nmap scan done !{Style.RESET_ALL}")

            # Web scan
            print(f">>> {Fore.YELLOW}[-] Nikto scan...{Style.RESET_ALL}")
            HTML += f"<h1>VI. Nikto scan</h1><br>"
            res = check_server(URL, True)
            HTML += res
            print(f">>> {Fore.GREEN}[+] Nikto scan done !{Style.RESET_ALL}")

            # Exploits
            print(f">>> {Fore.YELLOW}[-] Search for exploits and vuln...{Style.RESET_ALL}")
            HTML += f"<h1>VII. Potential vulnerabilities</h1><br>"
            for vuln in versions:
                HTML += f"""<strong><h2><i>Service - {vuln}</i></h2></strong>
                <table border="1">
                        <thead>
                            <tr>
                                <th width="195">Links to vuln</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><p>{searchsploit(vuln, True)}</p></td>
                            </tr>
                        </tbody>
                        </table>
                """
            print(f">>> {Fore.GREEN}[+] Searchsploit done !{Style.RESET_ALL}")
            

            HTML += f"<h1>VIII. Recommendations</h1><br>"
            HTML += """Keep your systems up-to-date with the latest security patches and updates for all software and services running on your domain or IP address. Vulnerabilities are often discovered and patched by vendors, so it's important to stay current with updates to minimize risk.<br><br>
            We also recommend reviewing the list of links provided in this report, which point to known exploits and vulnerabilities affecting various services. These links can provide additional information and guidance on how to mitigate these specific security risks for your domain or IP address.<br><br>

            By following these recommendations and staying vigilant against emerging security threats, you can help protect your systems and data from unauthorized access and exploitation.
            """
            #check_robots_txt(URL)
            

            renderHTML(HTML) # Generate PDF
            PATH = str(os.getcwd() + '\\result.pdf')
            print(f">>> {Fore.CYAN}PDF created successfully at {PATH}{Style.RESET_ALL}")
            print(f">>> {Fore.GREEN}[+] Ended at {datetime.now()}{Style.RESET_ALL}")
            break
            
        elif option == 6:
            IP = str(input(">>> Type your LHOST\n>>> "))
            PORT = str(input(">>> Type your LPORT\n>>> "))
            shells = reverse_shells(IP, PORT)

            print("\n\n=========================")
            print("Reverse shells one liner")
            print("=========================\n")
            for cmd, value in shells.items():
                print(f"{Fore.GREEN}[+] {cmd}{Style.RESET_ALL} => {Fore.MAGENTA}{value}{Style.RESET_ALL}")

        displayMenu()
        option = int(input(">>> Choose an option\n>>> "))

 
    

    
    

    